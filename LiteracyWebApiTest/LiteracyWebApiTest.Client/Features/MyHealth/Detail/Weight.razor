@inject HttpClient HttpClient
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Grids

<div class="row">
    <div class="col-4">
        <h5>체중</h5>
    </div>
    <div class="col-4"></div>
    <div class="col-4" align="right">
        <button type="button" class="btn btn-outline-secondary">큰 화면으로 보기</button>
    </div>
</div>

<div class="btn-group" role="group" aria-label="Basic outlined example">
    <button type="button" class="btn btn-outline-dark" @onclick="() => GetDifferentPeriodDataAsync(72)">전체</button>
    <button type="button" class="btn btn-outline-dark" @onclick="() => GetDifferentPeriodDataAsync(1)">1개월</button>
    <button type="button" class="btn btn-outline-dark" @onclick="() => GetDifferentPeriodDataAsync(3)">3개월</button>
</div>

@if (_weight is not null && _weight.Data.Count > 0)
{
    <p>총 <b style="color:red">@_weight.Data.Count</b>건</p>

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-4">
                    <h6>BMI 평균</h6>
                    <h6>@_weight.BmiAvg BMI</h6>
                </div>
                <div class="col-4">
                    <h6>체형</h6>
                    <h6>@_weight.Form</h6>
                </div>
                <div class="col-4">
                    <h6>평균 체중</h6>
                    <h6>@_weight.AvgWeight kg</h6>
                </div>
            </div>
        </div>
    </div>
    <br/>
    @if (_weightPivotData is not null)
    {
        <div class="card">
            <div class="card-body">
                <SfChart>
                    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Minimum="0" Maximum="100" Interval="25">
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                    </ChartPrimaryYAxis>

                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@_weightPivotData.GraphTypeData.FirstOrDefault(item => item.Type == "weight")?.Data"
                                     Name="체중" XName="Date" Width="2" Opacity="1" YName="Value" Fill="red" Type="ChartSeriesType.Line">
                            <ChartMarker Visible="true" Width="6" Height="6" Shape="ChartShape.Circle">
                            </ChartMarker>
                        </ChartSeries>
                    </ChartSeriesCollection>
                            
                    <ChartLegendSettings Visible="true" Position="LegendPosition.Top" Alignment="Syncfusion.Blazor.Charts.Alignment.Far">
                    </ChartLegendSettings>
                </SfChart>
            </div>
        </div>
    }
    <br/>

    <div class="card">
        <div class="card-body">
            <div class="col-lg-12 control-section">
                <div class="content-wrapper">
                    <div class="row">
                        <SfGrid DataSource="@_weight.Data">
                            <GridColumns>
                                <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(WeightWithBmi.Date) HeaderText="일시" TextAlign="TextAlign.Center" Width="100">
                                    <Template>
                                        @{
                                            var date = (context as WeightWithBmi);
                                            <div>
                                                <p>@date.Date.Split(" ")[0]</p>
                                            </div>
                                        }
                                    </Template>
                                </Syncfusion.Blazor.Grids.GridColumn>
                                <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(WeightWithBmi.Date) HeaderText="시간" TextAlign="TextAlign.Center" Width="100">
                                    <Template>
                                        @{
                                            var date = (context as WeightWithBmi);
                                            <div>
                                                <p>@date.Date.Split(" ")[1]</p>
                                            </div>
                                        }
                                    </Template>
                                </Syncfusion.Blazor.Grids.GridColumn>
                                <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(WeightWithBmi.Weight) HeaderText="체중" TextAlign="TextAlign.Center" Width="150"></Syncfusion.Blazor.Grids.GridColumn>
                                <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(WeightWithBmi.Bmi) HeaderText="BMI" TextAlign="TextAlign.Center" Width="150"></Syncfusion.Blazor.Grids.GridColumn>
                                <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(WeightWithBmi.Compare) HeaderText="비교" TextAlign="TextAlign.Center" Width="150"></Syncfusion.Blazor.Grids.GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br/>
}

@if (_weightLiteracy is not null)
{
    <div class="card">
        <div class="card-body">
            <h6 class="card-title">@_weightLiteracy.LiteracyName</h6>
            <hr />
            <p>@_weightLiteracy.LiteracyContent</p>
        </div>
    </div>
    <br />

    <div class="row">
        @foreach (var youtubeContents in _weightLiteracy.YoutubeContentList)
        {
            <div class="col-6">
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <img src="@youtubeContents.Thumbnail" class="rounded float-start" style="width:220px; height:130px">
                        </div>
                        <br />
                        <h6 class="card-title">@youtubeContents.Title</h6>
                        <p>@youtubeContents.Introduction</p>
                    </div>
                </div>
            </div>
        }
    </div>
}


@code {
    private WeightData? _weight;
    private LiteracyInfo? _weightLiteracy;
    private PivotData? _weightPivotData;
    private readonly DateTime _toDate = DateTime.Now;
    private DateTime _fromDate = DateCalculate.CalculatePreviousMonthDate(72);

    protected override async Task OnInitializedAsync()
    {
        _weight = await HttpClient.GetFromJsonAsync<WeightData>($"/MyHealth/weight/{_fromDate:yyyy-MM-dd}&{_toDate:yyyy-MM-dd}/1/10");
        _weightLiteracy = await HttpClient.GetFromJsonAsync<LiteracyInfo>("/MyHealth/literacy-information/weight");
        _weightPivotData = await HttpClient.GetFromJsonAsync<PivotData>($"/MyHealth/graph/weight/{_fromDate:yyyy-MM-dd}&{_toDate:yyyy-MM-dd}");

        foreach (var youtubeContents in _weightLiteracy.YoutubeContentList)
        {
            youtubeContents.Thumbnail = $"https://i.ytimg.com/vi/{youtubeContents.VideoId}/hqdefault.jpg";
        }
    }

    public async void GetDifferentPeriodDataAsync(int months)
    {
        _fromDate = DateCalculate.CalculatePreviousMonthDate(months);

        _weight = await HttpClient.GetFromJsonAsync<WeightData>($"/MyHealth/weight/{_fromDate:yyyy-MM-dd}&{_toDate:yyyy-MM-dd}/1/10");
        _weightPivotData = await HttpClient.GetFromJsonAsync<PivotData>($"/MyHealth/graph/weight/{_fromDate:yyyy-MM-dd}&{_toDate:yyyy-MM-dd}");

        StateHasChanged();
    }

}
