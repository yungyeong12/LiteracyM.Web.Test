@inject HttpClient HttpClient
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Grids

<div class="row">
    <div class="col-4">
        <h5>당화혈색소(HbA1c)</h5>
    </div>
    <div class="col-4"></div>
    <div class="col-4" align="right">
        <button type="button" class="btn btn-outline-secondary">큰 화면으로 보기</button>
    </div>
</div>

<div class="btn-group" role="group" aria-label="Basic outlined example">
    <button type="button" class="btn btn-outline-dark" @onclick="() => GetDifferentPeriodDataAsync(72)">전체</button>
    <button type="button" class="btn btn-outline-dark" @onclick="() => GetDifferentPeriodDataAsync(6)">6개월</button>
    <button type="button" class="btn btn-outline-dark" @onclick="() => GetDifferentPeriodDataAsync(24)">24개월</button>
</div>

@if (_hbA1c is not null && _hbA1c.Data.Count > 0)
{
    <p>총 <b style="color:red">@_hbA1c.Data.Count</b>건</p>
    <br/>

    @if (_hbA1cPivotData is not null)
    {
        <div class="card">
            <div class="card-body">
                <SfChart>
                    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime">
                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Minimum="0" Maximum="10" Interval="2">
                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>

                        <ChartStriplines>
                            <ChartStripline Start="0" End="6.2" Opacity="0.5" Color="#dee9fa" Visible="true">
                                <ChartStriplineBorder Width="0"></ChartStriplineBorder>
                            </ChartStripline>
                        </ChartStriplines>
                    </ChartPrimaryYAxis>

                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@_hbA1cPivotData.GraphTypeData.FirstOrDefault(item => item.Type == "hbA1c")?.Data"
                                     Name="당화혈색소(HbA1c)" XName="Date" Width="2" Opacity="1" YName="Value" Fill="blue" Type="ChartSeriesType.Line">
                            <ChartMarker Visible="true" Width="6" Height="6" Shape="ChartShape.Circle">
                            </ChartMarker>
                        </ChartSeries>
                    </ChartSeriesCollection>

                    <ChartLegendSettings Visible="true" Position="LegendPosition.Top" Alignment="Syncfusion.Blazor.Charts.Alignment.Far">
                    </ChartLegendSettings>
                </SfChart>
            </div>
        </div>
    }

    <br/>

    <div class="card">
        <div class="card-body">
            <div class="col-lg-12 control-section">
                <div class="content-wrapper">
                    <div class="row">
                        <SfGrid DataSource="@_hbA1c.Data">
                            <GridColumns>
                                <Syncfusion.Blazor.Grids.GridColumn HeaderText="일시" TextAlign="TextAlign.Center" Width="200">
                                    <GridColumns>
                                        <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(HbA1cByDate.Date) TextAlign="TextAlign.Center" HeaderText="참고치"></Syncfusion.Blazor.Grids.GridColumn>
                                    </GridColumns>
                                </Syncfusion.Blazor.Grids.GridColumn>
                                <Syncfusion.Blazor.Grids.GridColumn HeaderText="당화혈색소(HbA1c)" TextAlign="TextAlign.Center" Width="300">
                                    <GridColumns>
                                        <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(HbA1cByDate.HbA1c) TextAlign="TextAlign.Center" HeaderText="6.5이하"></Syncfusion.Blazor.Grids.GridColumn>
                                    </GridColumns>
                                </Syncfusion.Blazor.Grids.GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (_hbA1cLiteracy is not null)
{
    <div class="card">
        <div class="card-body">
            <h6 class="card-title">@_hbA1cLiteracy.LiteracyName</h6>
            <hr/>
            <p>@_hbA1cLiteracy.LiteracyContent</p>
        </div>
    </div>
    <br />

    <div class="row">
        @foreach (var youtubeContents in _hbA1cLiteracy.YoutubeContentList)
        {
            <div class="col-6">
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <img src="@youtubeContents.Thumbnail" class="rounded float-start" style="width:220px; height:130px">
                        </div>
                        <br/>
                        <h6 class="card-title">@youtubeContents.Title</h6>
                        <p>@youtubeContents.Introduction</p>
                    </div>
                </div>
            </div>
        }
    </div>
}


@code {
    private HbA1cData? _hbA1c;
    private LiteracyInfo? _hbA1cLiteracy;
    private PivotData? _hbA1cPivotData;
    private readonly DateTime _toDate = DateTime.Now;
    private DateTime _fromDate = DateCalculate.CalculatePreviousMonthDate(72);

    protected override async Task OnInitializedAsync()
    {
        _hbA1c = await HttpClient.GetFromJsonAsync<HbA1cData>($"/MyHealth/hba1c/{_fromDate:yyyy-MM-dd}&{_toDate:yyyy-MM-dd}/1/10");
        _hbA1cLiteracy = await HttpClient.GetFromJsonAsync<LiteracyInfo>("/MyHealth/literacy-information/hba1c");
        _hbA1cPivotData = await HttpClient.GetFromJsonAsync<PivotData>($"/MyHealth/graph/hba1c/{_fromDate:yyyy-MM-dd}&{_toDate:yyyy-MM-dd}");

        foreach (var youtubeContents in _hbA1cLiteracy.YoutubeContentList)
        {
            youtubeContents.Thumbnail = $"https://i.ytimg.com/vi/{youtubeContents.VideoId}/hqdefault.jpg";
        }
    }

    public async void GetDifferentPeriodDataAsync(int months)
    {
        _fromDate = DateCalculate.CalculatePreviousMonthDate(months);

        _hbA1c = await HttpClient.GetFromJsonAsync<HbA1cData>($"/MyHealth/hba1c/{_fromDate:yyyy-MM-dd}&{_toDate:yyyy-MM-dd}/1/10");
        _hbA1cPivotData = await HttpClient.GetFromJsonAsync<PivotData>($"/MyHealth/graph/hba1c/{_fromDate:yyyy-MM-dd}&{_toDate:yyyy-MM-dd}");

        StateHasChanged();
    }

}
